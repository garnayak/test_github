sudo apt-get update
sudo apt-get -y upgrade

sudo docker pull fedora

sudo docker ps

sudo docker ps -l  running and non -running instancess




54.254.158.176
54.254.158.176


S3 Container
ec2-user
sudo su root
vi /etc/ssh/sshd_config

Pemitrootlogin - emove 
Passwod authenticaion - remove 


ctrl + c 
:wq

service sshd restart
yum update
yum install httpd 
y

/etc/init.d/httpd start


password





___________


docker instalation throgh command line

FROM ubuntu:14.04
    RUN apt-get update
    RUN apt-get install -y curl

1  cd
    2  ls
    3  docker images
    4  ls
    5  touch Dockerfile
    6  ls
    7  vi Dockerfile
    8  pwd
    9  docker build -t nginximg .
   10  docker images
   11  cd /var/lib/docker/image/
   12  ls
   13  cd overlay2/
   14  ls
   15  cd imagedb/
   16  ls
   17  cd content/
   18  ls
   19  cd /var/lib/docker/
   20  ls
   21  cd volumes/
   22  ls
   23  cd
   24  ls
   25  docker
   26  docker images --help
   27  docker images
   28  docker run -it -p 9000:80 e9d090695a21 /bin/bash
   29  history


oot@ip-172-31-9-171 ~]# history
    1  cd
    2  ls
    3  docker images
    4  touch Dockerfile
    5  ls
    6  vi Dockerfile
    7  pwd
    8  vi Dockerfile
    9  ls
   10  docker build -t nginximg .
   11  ls
   12  docke rimages
   13  docker images
   14  vi Dockerfile
   15  docker build -t nginximg .
   16  vi Dockerfile
   17  docker build -t nginximg .
   18  docker images
   19  docker run -it -p 9000:80 90de6999f302 /bin/bash
   20  history
[root@ip-172-31-9-171 ~]#

oot@ip-172-31-9-171 ~]# history

DOCKER
docker pull fedora  # This is a direct way to fetch an image named 'fedora' from the public Docker hub.
docker images  # This shows the images available
docker run fedora touch file # create a file with touch
docker ps -l  # list out the Images
docker commit 9626763a35f9 my-touched-file

vi Dockerfile

FROM fedora
RUN yum install -y mongodb-server && mkdir -p /data/db
EXPOSE 27017
VOLUME ["/data/db"ù]
CMD mongod

### We're building on the 'fedora' image, running a shell command to install software and make directory, then declaring a port to publish, and directory to store in. Finally, we're declaring the command to be executed for this container's runtime (e.g. 'mongod'). ###

docker build -t mongodb . # running a docker build


docker build -t nginximg .

docker run my-touched-file ls -s /file

    1  cd
    2  docker images
    3 touch Dockerfile
    4 ls
    5  vi Dockerfile
    6   vi Dockerfile
    7  docker build -t nginximg .
    8  docker images

   9   vi Dockerfile
   10  docker build -t nginximg .
   11  vi Dockerfile
   12  docker build -t nginximg .
   13  docker images
docker container from Image
   14  docker run -it -p 9000:80 90de6999f302 /bin/bash
   15  history
[root@ip-172-31-9-171 ~]#




------

sudo apt-get update
sudo apt-get -y upgrade

sudo docker pull fedora

sudo docker ps

sudo docker ps -l  running and non -running instancess









d355ed3537e9


docker run -it -p 9001:80 d355ed3537e9 /bin/bash




docker run -it -p 9002:80 8c08ccd78ada /bin/bash


cd









attach    Attach to a running container
build     Build a container from a Dockerfile
commit    Create a new image from a container's changes
cp        Copy files/folders from the containers filesystem to the host path
diff      Inspect changes on a container's filesystem
events    Get real time events from the server
export    Stream the contents of a container as a tar archive
history   Show the history of an image
images    List images
import    Create a new filesystem image from the contents of a tarball
info      Display system-wide information
insert    Insert a file in an image
inspect   Return low-level information on a container
kill      Kill a running container
load      Load an image from a tar archive
login     Register or Login to the docker registry server
logs      Fetch the logs of a container
port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT
ps        List containers
pull      Pull an image or a repository from the docker registry server
push      Push an image or a repository to the docker registry server
restart   Restart a running container
rm        Remove one or more containers
rmi       Remove one or more images
run       Run a command in a new container
save      Save an image to a tar archive
search    Search for an image in the docker index
start     Start a stopped container
stop      Stop a running container
tag       Tag an image into a repository
top       Lookup the running processes of a container
version   Show the docker version information
wait      Block until a container stops, then print its exit code